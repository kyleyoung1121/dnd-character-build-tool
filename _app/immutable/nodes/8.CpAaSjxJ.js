import"../chunks/DsnmJJEf.js";import"../chunks/69_IOA4Y.js";import{o as E}from"../chunks/B-1pnTh3.js";import{W as m,ar as A,X as S,at as y,Y as O,Z as $,l as T,A as j,_ as d,$ as u,a0 as k}from"../chunks/BOKL8LPc.js";import{g as p,e as b,s as I}from"../chunks/BGP3eZCr.js";import{i as P}from"../chunks/DDng5zeD.js";import{c as f}from"../chunks/C9Fx77Xw.js";import{d as h}from"../chunks/vVnGiSbc.js";import{a as g}from"../chunks/CERfiCyH.js";function v(){console.log("üß™ Testing Bard + High Elf Perception conflict scenario");const s=p(f);if(s._provenance)for(const o of Object.keys(s._provenance));console.log("1Ô∏è‚É£ Selecting Bard class..."),g("class:Bard",{class:"Bard"}),console.log("2Ô∏è‚É£ Selecting Perception as Bard skill..."),g("feature:Skill Proficiencies:0",{skills:["Perception"]});let t=p(f);console.log("After Bard selection:"),console.log("- Skills:",t.skills),console.log("- Provenance keys:",Object.keys(t._provenance||{})),console.log("3Ô∏è‚É£ Selecting High Elf race..."),g("race:High Elf",{race:"High Elf"}),console.log("4Ô∏è‚É£ Applying High Elf Keen Senses..."),g("feature:Keen Senses",{skills:["Perception"]});let c=p(f);console.log("After High Elf selection:"),console.log("- Skills:",c.skills),console.log("- Provenance keys:",Object.keys(c._provenance||{})),console.log("5Ô∏è‚É£ Running conflict detection...");const e=h();if(console.log("Conflicts detected:",e),e.hasConflicts){console.log("‚úÖ SUCCESS: Conflict detected!");for(const o of e.conflicts)console.log(`- ${o.type}: ${o.value} (sources: ${o.sources.join(", ")})`),console.log(`- Affected tabs: ${o.affectedTabs?.join(", ")||"none"}`)}else console.log("‚ùå FAILURE: No conflicts detected");return e}typeof window<"u"&&(window.testBardHighElfConflict=v);function x(){const s=p(f);if(console.log("=== CHARACTER STORE DEBUG ==="),console.log("Skills array:",s.skills),console.log("Provenance data:",s._provenance),s._provenance){console.log(`
=== PROVENANCE ANALYSIS ===`);for(const[e,o]of Object.entries(s._provenance))console.log(`
Scope: ${e}`),"_set"in o&&o._set?(console.log("  _set:",o._set),o._set.skills&&console.log(`  ‚Üí Added skills: [${o._set.skills.join(", ")}]`)):(console.log("  Flat format:",o),o.skills&&console.log(`  ‚Üí Added skills: [${o.skills.join(", ")}]`))}console.log(`
=== SKILL SOURCE ANALYSIS ===`);const t={};if(s._provenance)for(const[e,o]of Object.entries(s._provenance)){const n="_set"in o&&o._set?o._set:o;if(n&&Array.isArray(n.skills))for(const l of n.skills)t[l]||(t[l]={}),t[l][e]=(t[l][e]||0)+1}for(const[e,o]of Object.entries(t)){const n=Object.values(o).reduce((i,r)=>i+r,0);console.log(`${e}:`);for(const[i,r]of Object.entries(o))console.log(`  ‚Üí ${i}: ${r} instance(s)`);const l=s.skills.filter(i=>i===e).length;console.log(`  üìä Expected: ${n}, Actual: ${l}`),console.log(l!==n?`  ‚ö†Ô∏è  MISMATCH: Expected ${n}, found ${l} in skills array`:"  ‚úÖ CORRECT: Instance count matches expectations")}const c={};for(const e of s.skills)c[e]=(c[e]||0)+1;console.log(`
=== DUPLICATE DETECTION ===`);for(const[e,o]of Object.entries(c))o>1&&console.log(`üî¥ DUPLICATE: ${e} appears ${o} times`);return{skills:s.skills,provenance:s._provenance,skillSources,duplicates:Object.entries(c).filter(([e,o])=>o>1)}}var B=S(`<div class="main-content"><h1>Race Page (Debug View)</h1> <p>This is just a test to see what's in <code>character_store</code>.</p> <button style="background: blue; color: white; padding: 10px; margin: 10px;">üîç Debug Conflicts</button> <button style="background: green; color: white; padding: 10px; margin: 10px;">üß™ Test Bard+Elf Conflict</button> <pre> </pre></div>`);function M(s,t){m(t,!1);let c=j();const e=f.subscribe(a=>{A(c,a)});E(e);function o(){console.log("=== MANUAL DEBUG START ===");const a=x(),_=h();return console.log(`
=== CONFLICT DETECTION ===`),console.log("Conflicts:",_),a}P();var n=B(),l=d(u(n),4),i=d(l,2),r=d(i,2),C=u(r,!0);k(r),k(n),y(a=>I(C,a),[()=>JSON.stringify(T(c),null,2)]),b("click",l,o),b("click",i,()=>v()),O(s,n),$()}export{M as component};
