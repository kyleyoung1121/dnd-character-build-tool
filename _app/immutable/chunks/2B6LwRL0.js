import{d as i,w as f}from"./ZJQv4x7Q.js";import{c as d}from"./CIqA3WZi.js";import{d as u}from"./BbUdCK9o.js";const C=i(d,t=>{console.log("[Conflict Store] Character changed, detecting conflicts..."),console.log("[Conflict Store] Character:",{class:t?.class,race:t?.race,subrace:t?.subrace,charisma:t?.charisma,spells:t?.spells,spellsLength:t?.spells?.length});const e=u();return console.log("[Conflict Store] Detection result:",e),e}),c=f(new Set),h=i([C,c],([t,e])=>{if(console.log("[Active Conflicts] Deriving active conflicts..."),console.log("[Active Conflicts] Input conflicts:",t),console.log("[Active Conflicts] Visited tabs:",Array.from(e)),!t.hasConflicts)return console.log("[Active Conflicts] No conflicts detected"),{hasConflicts:!1,conflicts:[],tabsNeedingAttention:[]};const s=t.conflicts.filter(o=>o.type==="spell_limit"?!0:o.affectedTabs?.some(l=>e.has(l))??!1),a=[...new Set(s.flatMap(o=>o.affectedTabs||[]))].filter(o=>s.some(l=>l.type==="spell_limit"&&l.affectedTabs?.includes(o))?!0:e.has(o)),n={hasConflicts:s.length>0,conflicts:s,tabsNeedingAttention:a};return console.log("[Active Conflicts] Final result:",n),n});function b(t){c.update(e=>{const s=new Set(e);return s.add(t),s})}export{h as a,C as c,b as m,c as v};
