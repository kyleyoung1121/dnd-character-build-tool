import{g as v}from"./ZJQv4x7Q.js";import{c as g}from"./CIqA3WZi.js";import{g as p,a as S}from"./u1FZ14JW.js";function W(){const e=v(g),l=[];if(!e)return{hasConflicts:!1,conflicts:[],tabsNeedingAttention:[]};const n={skill:{},proficiency:{},language:{},feature:{},spell_limit:{}};if(!e._provenance)return{hasConflicts:!1,conflicts:[],tabsNeedingAttention:[]};for(const[s,a]of Object.entries(e._provenance)){const r="_set"in a&&a._set?a._set:a;if(r)for(const[o,d]of Object.entries(r)){if(!Array.isArray(d))continue;let c;switch(o){case"skills":c="skill";break;case"proficiencies":c="proficiency";break;case"languages":c="language";break;case"features":c="feature";break;default:continue}for(const f of d)n[c][f]||(n[c][f]=[]),n[c][f].push(s)}}for(const[s,a]of Object.entries(n))if(s!=="spell_limit"){for(const[r,o]of Object.entries(a))if(o.length>1){const d=k(o);l.push({type:s,value:r,sources:o,affectedTabs:d})}}console.log("[Conflict Detection] Checking spell limit violations..."),console.log("[Conflict Detection] Character state:",{class:e.class,charisma:e.charisma,spells:e.spells,spellsType:typeof e.spells,spellsIsArray:Array.isArray(e.spells),spellsLength:e.spells?.length,provenance:Object.keys(e._provenance||{})});const i=b(e);console.log("[Conflict Detection] Spell limit conflicts found:",i.length,i),l.push(...i);const t=[...new Set(l.flatMap(s=>s.affectedTabs||[]))];return{hasConflicts:l.length>0,conflicts:l,tabsNeedingAttention:t}}function b(e){const l=[];if(console.log("[Spell Limit] Checking character:",{class:e.class,charisma:e.charisma,spells:e.spells,spellsLength:e.spells?.length}),!e.spells||!Array.isArray(e.spells)||e.spells.length===0)return console.log("[Spell Limit] No spells found, returning empty"),l;const n=e.spells.map(r=>typeof r=="string"?r:typeof r=="object"&&r!==null&&"name"in r?r.name:"").filter(r=>r!==""),i=new Set(n);console.log("[Spell Limit] Selected spells:",Array.from(i));const t=C(e);console.log("[Spell Limit] Calculated limits:",t);const s=L(e,i);console.log("[Spell Limit] Spell counts:",s);const a=[];if(s.cantrips>t.cantrips&&a.push({level:"cantrips",selected:s.cantrips,limit:t.cantrips,excess:s.cantrips-t.cantrips}),t.isSharedLimits){const r=s.level1+s.level2;r>t.sharedLeveled&&a.push({level:"leveled",selected:r,limit:t.sharedLeveled,excess:r-t.sharedLeveled})}else s.level1>t.level1&&a.push({level:"level1",selected:s.level1,limit:t.level1,excess:s.level1-t.level1}),s.level2>t.level2&&a.push({level:"level2",selected:s.level2,limit:t.level2,excess:s.level2-t.level2});if(a.length>0){console.log("[Spell Limit] *** VIOLATIONS FOUND ***:",a);const r=y(e),o={type:"spell_limit",value:`${a.length} spell limit violation${a.length>1?"s":""}`,violations:a,causes:r,affectedTabs:["spells"]};l.push(o),console.log("[Spell Limit] Created conflict:",o)}else console.log("[Spell Limit] No violations detected");return l}function C(e){const l=h(e),n={cantrips:0,level1:0,level2:0,sharedLeveled:0,isSharedLimits:!1};return l.forEach(i=>{if(i.chooseable!==!1){const t=i.source==="class"||i.source==="subclass"&&!i.sourceName.includes(" - ")||i.source==="feature";i.chooseCantripCount!==void 0||i.chooseSpellCount!==void 0?i.chooseFrom&&i.chooseFrom.length>0&&(i.chooseCantripCount!==void 0&&t&&(n.cantrips+=i.chooseCantripCount),i.chooseSpellCount!==void 0&&t&&(n.isSharedLimits=!0,n.sharedLeveled+=i.chooseSpellCount)):i.chooseCount&&t&&i.chooseFrom&&i.chooseFrom.length>0&&(n.cantrips+=i.chooseCount,n.isSharedLimits=!0,n.sharedLeveled+=i.chooseCount)}}),n}function L(e,l){const n={cantrips:0,level1:0,level2:0},i=h(e),t={cantrips:new Set,level1:new Set,level2:new Set},s=p(0),a=p(1),r=p(2);i.forEach(o=>{o.chooseable!==!1&&(o.source==="class"||o.source==="subclass"&&!o.sourceName.includes(" - ")||o.source==="feature")&&o.chooseFrom&&o.chooseFrom.length>0&&o.chooseFrom.forEach(c=>{(o.maxSpellLevel===void 0||o.maxSpellLevel>=0)&&s.filter(u=>u.classes.includes(c)).forEach(u=>t.cantrips.add(u.name)),(o.maxSpellLevel===void 0||o.maxSpellLevel>=1)&&a.filter(u=>u.classes.includes(c)).forEach(u=>t.level1.add(u.name)),(o.maxSpellLevel===void 0||o.maxSpellLevel>=2)&&r.filter(u=>u.classes.includes(c)).forEach(u=>t.level2.add(u.name))})});for(const o of l)t.cantrips.has(o)?n.cantrips++:t.level1.has(o)?n.level1++:t.level2.has(o)&&n.level2++;return n}function h(e){return S(e)}function y(e){const l=[];if(e.class==="Cleric"||e.class==="Druid"){const n=e.wisdom||10,i=n<8?10:n,t=Math.floor((i-10)/2),s=Math.max(1,t+3);l.push(`Wisdom ${i} (${t>=0?"+":""}${t}) allows ${s} prepared spells`)}else if(e.class==="Paladin"){const n=e.charisma||10,i=n<8?10:n,t=Math.floor((i-10)/2),s=Math.max(1,t+1);l.push(`Charisma ${i} (${t>=0?"+":""}${t}) allows ${s} prepared spells`)}return e.subclass&&l.push(`Subclass: ${e.subclass}`),e.class&&l.push(`Class: ${e.class}`),l}function k(e){const l=new Set,n=new Set;for(const s of e)s.startsWith("background:")||s.includes("background")||m(s)?(l.add("background"),F(s)&&n.add("background")):s.startsWith("race:")||T(s)?(l.add("species"),A(s)&&n.add("species")):(s.startsWith("class:")||s.startsWith("feature:")&&x(s))&&(l.add("class"),w(s)&&n.add("class"));const i=Array.from(l),t=Array.from(n);return[...t,...i.filter(s=>!t.includes(s))]}function w(e){return/:\d+$/.test(e)&&(e.includes("Skill Proficiencies")||e.includes("Bonus Proficiencies")||e.includes("Expertise")||e.includes("college_of_lore"))}function A(e){return/:\d+$/.test(e)&&(e.includes("Tool Proficiency")||e.includes("Cantrip")||e.includes("Draconic Ancestry"))}function x(e){if(e.startsWith("class:"))return!0;if(e.startsWith("feature:")){const l=e.split(":")[1]?.toLowerCase()||"";return l.includes("skill prof")||l.includes("expertise")||l.includes("fighting style")||l.includes("bonus prof")||l.includes("martial arts")||l.includes("unarmored")||l.includes("spellcasting")||l.includes("channel divinity")||l.includes("wild shape")}return!1}function T(e){if(e.startsWith("race:")||e.startsWith("species:"))return!0;if(e.startsWith("feature:")){const l=e.split(":")[1]?.toLowerCase()||"";return l.includes("keen sense")||l.includes("darkvision")||l.includes("fey ancestry")||l.includes("trance")||l.includes("lucky")||l.includes("brave")||l.includes("dwarven")||l.includes("draconic")||l.includes("gnome cunning")||l.includes("hellish")||l.includes("infernal")||l.includes("menacing")||l.includes("relentless")||l.includes("savage")||l.includes("ability score increase")||l.includes("stonecunning")||l.includes("tool proficiency")}return!1}function m(e){return/^(feature:)(acolyte|criminal|folk_hero|noble|sage|soldier|charlatan|entertainer|guild_artisan|hermit|outlander|sailor|urchin|custom_background)/i.test(e)}function F(e){return/:\d+$/.test(e)&&m(e)}function M(e){return!e.affectedTabs||e.affectedTabs.length===0?null:e.type==="spell_limit"?"spells":e.affectedTabs[0]}export{W as d,M as g};
